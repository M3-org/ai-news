name: ElizaOS Daily Data Collection

on:
  schedule:
    - cron: '0 0 * * *' # Run at midnight UTC every day
  workflow_dispatch:
    inputs:
      after_date:
        description: 'Start date (YYYY-MM-DD)'
        required: false
        type: string
      before_date:
        description: 'End date (YYYY-MM-DD)'
        required: false
        type: string
      force_overwrite:
        description: 'Force overwrite existing data'
        required: false
        type: boolean
        default: false

jobs:
  sqlite-job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for checkout and gh-pages push
      pages: write      # Needed for gh-pages deployment
      id-token: write   # Needed for gh-pages deployment
    environment:
      name: gh-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          # Fetch all history so that the last modified date can be determined
          fetch-depth: 0

      # Fetch existing DB from gh-pages branch if it exists
      - name: Check and fetch database (elizaos.sqlite)
        run: |
          mkdir -p data
          
          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "gh-pages branch exists, fetching database"
            git fetch origin gh-pages:gh-pages --depth=1 || true
            
            # Check if encrypted elizaos.sqlite exists in the branch
            if git ls-tree -r --name-only gh-pages | grep -q "data/elizaos.sqlite.enc"; then
              echo "Restoring encrypted elizaos.sqlite.enc from gh-pages branch"
              git show gh-pages:data/elizaos.sqlite.enc > data/elizaos.sqlite.enc
            else
              echo "No existing elizaos.sqlite.enc found in gh-pages branch"
            fi
          else
            echo "gh-pages branch does not exist yet, will be created on first deployment"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23' # Or your preferred Node.js version
          
      - name: Process secrets securely
        run: |
          echo '${{ secrets.ENV_SECRETS }}' > env_secrets.json
          chmod 600 env_secrets.json
          
          # Mask values
          jq -r 'to_entries[] | .value' env_secrets.json | while read -r value; do
            if [ -n "$value" ]; then
              echo "::add-mask::$value"
            fi
          done
          
          # Set environment variables
          jq -r 'to_entries[] | "\(.key)=\(.value)"' env_secrets.json > env_vars.txt
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < env_vars.txt
          
          # Clean up
          rm env_secrets.json env_vars.txt

      - name: Install Dependencies
        run: npm install


      - name: Get yesterday's date
        id: date
        run: echo "YESTERDAY=$(date -d "yesterday" +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Run data collection
        run: |
          # Determine collection parameters based on trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual workflow_dispatch run
            ARGS="--config=elizaos.json --mode=manual"
            if [ -n "${{ inputs.after_date }}" ]; then
              ARGS="$ARGS --after=${{ inputs.after_date }}"
            fi
            if [ -n "${{ inputs.before_date }}" ]; then
              ARGS="$ARGS --before=${{ inputs.before_date }}"
            fi
            if [ -z "${{ inputs.after_date }}" ] && [ -z "${{ inputs.before_date }}" ]; then
              ARGS="$ARGS --date=${{ steps.date.outputs.YESTERDAY }}"
            fi
          else
            # Scheduled run uses daily mode
            ARGS="--config=elizaos.json --mode=daily --date=${{ steps.date.outputs.YESTERDAY }}"
          fi
          
          if [ "${{ inputs.force_overwrite || 'false' }}" = "true" ]; then
            ARGS="$ARGS --force-overwrite"
          fi
          
          echo "Executing: ./scripts/run-collection.js $ARGS"
          ./scripts/run-collection.js $ARGS
        env:
          RUN_ONCE: true
          NODE_ENV: production


      - name: Generate pipeline dashboard
        run: node scripts/generate-dashboard.js
        continue-on-error: true

      - name: Get current timestamp for commit message
        id: commit_time
        run: echo "COMMIT_DATETIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Deploy to gh-pages branch
        id: deployment
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          keep_files: true
          # publish_branch: gh-pages # Default is gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: "Update ElizaOS unified data ${{ env.COMMIT_DATETIME }}"
