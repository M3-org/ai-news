name: ElizaOS Daily Data Collection

on:
  schedule:
    - cron: '0 0 * * *' # Run at midnight UTC every day
  workflow_dispatch:
    inputs:
      after_date:
        description: 'Start date (YYYY-MM-DD)'
        required: false
        type: string
      before_date:
        description: 'End date (YYYY-MM-DD)'
        required: false
        type: string
      force_overwrite:
        description: 'Force overwrite existing data'
        required: false
        type: boolean
        default: false

jobs:
  sqlite-job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for checkout and gh-pages push
      pages: write      # Needed for gh-pages deployment
      id-token: write   # Needed for gh-pages deployment
    environment:
      name: gh-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          # Fetch all history so that the last modified date can be determined
          fetch-depth: 0

      # Fetch existing DB from gh-pages branch if it exists
      - name: Check and fetch database (elizaos.sqlite)
        run: |
          mkdir -p data
          
          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "gh-pages branch exists, fetching database"
            git fetch origin gh-pages:gh-pages --depth=1 || true
            
            # Check if encrypted elizaos.sqlite exists in the branch
            if git ls-tree -r --name-only gh-pages | grep -q "data/elizaos.sqlite.enc"; then
              echo "Restoring encrypted elizaos.sqlite.enc from gh-pages branch"
              git show gh-pages:data/elizaos.sqlite.enc > data/elizaos.sqlite.enc
            else
              echo "No existing elizaos.sqlite.enc found in gh-pages branch"
            fi
          else
            echo "gh-pages branch does not exist yet, will be created on first deployment"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23' # Or your preferred Node.js version
          
      - name: Process secrets securely
        run: |
          echo '${{ secrets.ENV_SECRETS }}' > env_secrets.json
          chmod 600 env_secrets.json
          
          # Mask values
          jq -r 'to_entries[] | .value' env_secrets.json | while read -r value; do
            if [ -n "$value" ]; then
              echo "::add-mask::$value"
            fi
          done
          
          # Set environment variables
          jq -r 'to_entries[] | "\(.key)=\(.value)"' env_secrets.json > env_vars.txt
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < env_vars.txt
          
          # Clean up
          rm env_secrets.json env_vars.txt

      - name: Install Dependencies
        run: npm install

      - name: Decrypt database (if exists)
        env:
          SQLITE_ENCRYPTION_KEY: ${{ secrets.SQLITE_ENCRYPTION_KEY }}
        run: |
          if [ -f "data/elizaos.sqlite.enc" ]; then
            if [ -z "$SQLITE_ENCRYPTION_KEY" ]; then
              echo "Error: SQLITE_ENCRYPTION_KEY secret is not set."
              exit 1
            fi
            echo "Decrypting data/elizaos.sqlite.enc..."
            openssl enc -d -aes-256-cbc -pbkdf2 -in data/elizaos.sqlite.enc -out data/elizaos.sqlite -k "$SQLITE_ENCRYPTION_KEY"
            if [ $? -ne 0 ]; then
              echo "Error: Decryption failed. Check the encryption key or file integrity."
              rm -f data/elizaos.sqlite 
              exit 1
            fi
            echo "Decryption successful."

            # Check database integrity
            echo "Checking database integrity..."
            if command -v sqlite3 &> /dev/null; then
              sqlite3 data/elizaos.sqlite "PRAGMA integrity_check;"
              if [ $? -ne 0 ]; then
                echo "Error: Database integrity check failed! The decrypted file might be corrupted."
                rm -f data/elizaos.sqlite 
                exit 1 # Exit if integrity check fails
              else
                 echo "Database integrity check passed."
              fi
            else
              echo "Warning: sqlite3 command not found. Skipping integrity check."
            fi
            rm data/elizaos.sqlite.enc 
          else
            echo "No encrypted database found to decrypt."
          fi

      - name: Get yesterday's date
        id: date
        run: echo "YESTERDAY=$(date -d "yesterday" +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Run historical generation
        run: |
          # Build command dynamically
          CMD="npm run historical -- --source=elizaos.json --output=./output"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            [ -n "${{ inputs.after_date }}" ] && CMD="$CMD --after=${{ inputs.after_date }}"
            [ -n "${{ inputs.before_date }}" ] && CMD="$CMD --before=${{ inputs.before_date }}"
            # Use yesterday if no dates provided
            [ -z "${{ inputs.after_date }}" ] && [ -z "${{ inputs.before_date }}" ] && CMD="$CMD --date=${{ steps.date.outputs.YESTERDAY }}"
          else
            CMD="$CMD --date=${{ steps.date.outputs.YESTERDAY }}"
          fi
          
          echo "Running: $CMD"
          eval $CMD
        env:
          RUN_ONCE: true
          NODE_ENV: production
          FORCE_OVERWRITE: ${{ inputs.force_overwrite || 'false' }}

      - name: Encrypt database
        env:
          SQLITE_ENCRYPTION_KEY: ${{ secrets.SQLITE_ENCRYPTION_KEY }}
        run: |
          DB_FILE="data/elizaos.sqlite"
          
          [ ! -f "$DB_FILE" ] && { echo "No $DB_FILE found to encrypt."; exit 0; }
          [ -z "$SQLITE_ENCRYPTION_KEY" ] && { echo "Error: SQLITE_ENCRYPTION_KEY secret is not set."; exit 1; }
          
          echo "Encrypting $DB_FILE..."
          openssl enc -aes-256-cbc -salt -pbkdf2 -in "$DB_FILE" -out "${DB_FILE}.enc" -k "$SQLITE_ENCRYPTION_KEY" || {
            echo "Error: Encryption failed."
            exit 1
          }
          
          echo "Encryption successful."
          rm "$DB_FILE"

      - name: Prepare files for deployment
        run: |
          YESTERDAY=${{ steps.date.outputs.YESTERDAY }}
          
          # Helper function for conditional file copying
          copy_if_exists() {
            local src="$1" dest="$2" desc="$3"
            if [ -f "$src" ]; then
              echo "Copying $desc: $src -> $dest"
              mkdir -p "$(dirname "$dest")"
              cp "$src" "$dest"
            else
              echo "Warning: $desc not found: $src"
            fi
          }
          
          # Setup directories and copy files
          mkdir -p ./public/data ./public/elizaos/discord
          copy_if_exists "data/elizaos.sqlite.enc" "./public/data/elizaos.sqlite.enc" "encrypted database"
          
          # Copy summary directories
          echo "Copying Discord summaries"
          cp -r output/discord/summaries/* ./public/elizaos/discord/ 2>/dev/null || echo "No Discord summary files to copy."
          echo "Copying ElizaOS daily summaries"
          cp -r output/elizaos/* ./public/elizaos/ 2>/dev/null || echo "No ElizaOS daily summary files to copy."
          
          # Create daily files
          copy_if_exists "output/discord/summaries/${YESTERDAY}.json" "./public/elizaos/discord/daily.json" "Discord daily JSON"
          copy_if_exists "output/discord/summaries/${YESTERDAY}.md" "./public/elizaos/discord/daily.md" "Discord daily MD"
          copy_if_exists "output/elizaos/${YESTERDAY}.json" "./public/elizaos/json/daily.json" "ElizaOS daily JSON"

      - name: Validate JSON files
        run: find ./public/elizaos -name "*.json" -type f -exec jq empty {} \; || { echo "Invalid JSON detected"; exit 1; }

      - name: Get current timestamp for commit message
        id: commit_time
        run: echo "COMMIT_DATETIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Deploy to gh-pages branch (data only)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: "Update ElizaOS unified data ${{ env.COMMIT_DATETIME }}"

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Generate directory listings
        uses: jayanta525/github-pages-directory-listing@v4.0.0
        with:
          FOLDER: .

      - name: Deploy final site with directory listings
        id: deployment
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: "Add directory listings ${{ env.COMMIT_DATETIME }}"
